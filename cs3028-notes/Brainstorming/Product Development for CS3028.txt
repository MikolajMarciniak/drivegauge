The general workflow of the application functionality should go like this:
1) connect to the OBDII adapter through Bluetooth;
2) initialize the OBDII adapter with AT commands;
3) continuously get data from the vehicle by issuing the corresponding PID codes.




Create an ArrayList that will read devices…
Initialise the Bluetooth pairing mechanism…
Create for loop to receive device names…


Create another ArrayList to cycle through the adaptor…
Create a mechanism that sticks one device to the program…


Print the user's device and display it to the user…


Create a save for the user's device…


We can use an OBD-Java-API library to issue commands…
These commands are what give data to the user and to the company via the port…
Within the commands, we can decide what data we want to have the companies to have access to, i.e. speed monitoring, brake monitoring, time of drive, etc…
These commands/OBD codes can then be given to the company to decide how to evaluate their ‘credit score’...


https://lembergsolutions.com/blog/how-guide-obdii-reader-app-development (source for the ideas)
https://www.researchgate.net/publication/266176657_DEVELOPMENT_OF_OBD-II_DRIVER_INFORMATION_SYSTEM (good paper to read for additional info on general programming of OBDII.